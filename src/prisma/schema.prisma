datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  folders       folders[]
  notes         notes[]
  archives      archives[]
  favorites     favorites[]
  trashes       trashes[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model folders {
  id          Int       @id @unique @default(autoincrement())
  name        String
  can_deleted Boolean?  @default(true)
  created_at  DateTime? @default(now())
  updated_at  DateTime?
  deleted_at  DateTime?
  notes       notes[]
  user_id     String
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  trashes     trashes[]
}

model notes {
  id         Int         @id @unique @default(autoincrement())
  name       String
  content    String?
  user_id    String
  created_at DateTime    @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  folder     folders     @relation(fields: [folder_id], references: [id])
  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  archives   archives[]
  favorites  favorites[]
  trashes    trashes[]
  folder_id  Int
}

model archives {
  id         Int       @id @unique @default(autoincrement())
  user_id    String
  notes_id   Int
  notes      notes     @relation(fields: [notes_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])
  created_at DateTime  @default(now())
  deleted_at DateTime?
}

model favorites {
  id         Int       @id @unique @default(autoincrement())
  user_id    String
  notes_id   Int
  notes      notes     @relation(fields: [notes_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])
  created_at DateTime  @default(now())
  deleted_at DateTime?
}

model trashes {
  id         Int       @id @unique @default(autoincrement())
  user_id    String
  notes_id   Int?
  folder_id  Int?
  folders    folders?  @relation(fields: [folder_id], references: [id], onDelete: Cascade)
  notes      notes?    @relation(fields: [notes_id], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [user_id], references: [id])
  created_at DateTime  @default(now())
  deleted_at DateTime?
}
