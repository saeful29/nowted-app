generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("")
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  deleted_at                  DateTime?     @db.Timestamptz(6)
  users                       public_users?

  @@index([instance_id])
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model public_users {
  id         String      @id @db.Uuid
  updated_at DateTime?   @db.Timestamptz(6)
  full_name  String?
  avatar_url String?
  users      users       @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  folders    folders[]
  notes      notes[]
  archived   archives[]
  favorites  favorites[]
  trashes    trashes[]

  @@map("users")
  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}

model folders {
  id         String       @id @unique @default(cuid())
  name       String
  user_id    String       @db.Uuid
  created_at DateTime     @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  users      public_users @relation(fields: [user_id], references: [id])
  notes      notes[]
  trashes    trashes[]

  @@schema("public")
}

model notes {
  id         String       @id @unique @default(cuid())
  name       String
  content    String?
  user_id    String       @db.Uuid
  folder_id  String
  created_at DateTime     @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  folders    folders      @relation(fields: [folder_id], references: [id])
  users      public_users @relation(fields: [user_id], references: [id])
  archives   archives[]
  favorites  favorites[]
  trashes    trashes[]

  @@schema("public")
}

model archives {
  id         String   @id @unique @default(cuid())
  user_id    String   @db.Uuid
  notesId    String
  created_at DateTime @default(now())

  notes notes        @relation(fields: [notesId], references: [id])
  users public_users @relation(fields: [user_id], references: [id])

  @@schema("public")
}

model favorites {
  id         String   @id @unique @default(cuid())
  user_id    String   @db.Uuid
  notes_id   String
  created_at DateTime @default(now())

  notes notes        @relation(fields: [notes_id], references: [id])
  users public_users @relation(fields: [user_id], references: [id])

  @@schema("public")
}

model trashes {
  id         String    @id @unique @default(cuid())
  user_id    String    @db.Uuid
  notes_id   String
  folder_id  String
  created_at DateTime  @default(now())
  deleted_at DateTime?

  folders folders      @relation(fields: [folder_id], references: [id])
  notes   notes        @relation(fields: [notes_id], references: [id])
  users   public_users @relation(fields: [user_id], references: [id])

  @@schema("public")
}
